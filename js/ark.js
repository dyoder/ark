// Generated by CoffeeScript 1.3.3
(function() {
  var Ark, CoffeeScript, Crypto, Eco, Fibers, FileSystem, Future, Path, Util, base64, beautify, code, compile_coffeescript, dependencies, error, glob, index, inspect, make_synchronous, manifest, md5, minify, print, read, readStream, readdir, render, run_as_fiber, stat, warn,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Util = require("util");

  inspect = function(thing) {
    return Util.inspect(thing);
  };

  print = console.log;

  error = function(message) {
    throw new Error(message);
  };

  warn = function(message) {
    return process.stderr.write("" + message + "\n");
  };

  read = function(path) {
    return FileSystem.readFileSync(path, 'utf-8');
  };

  readdir = function(path) {
    return FileSystem.readdirSync(path);
  };

  readStream = function(stream) {
    var buffer, fiber;
    buffer = "";
    fiber = Fiber.current;
    stream.resume();
    stream.on("data", function(data) {
      return buffer += data;
    });
    stream.on("end", function() {
      return fiber.run();
    });
    Fiber["yield"]();
    return buffer;
  };

  stat = function(path) {
    return FileSystem.statSync(path);
  };

  Crypto = require("crypto");

  md5 = function(string) {
    return Crypto.createHash('md5').update(string, 'utf-8').digest("hex");
  };

  base64 = function(string) {
    return new Buffer(string).toString('base64');
  };

  FileSystem = require("fs");

  Path = require("path");

  Fibers = require("fibers");

  Future = require("fibers/future");

  make_synchronous = function(fn) {
    fn = Future.wrap(fn);
    return function() {
      return fn.apply(null, arguments).wait();
    };
  };

  run_as_fiber = function(fn) {
    return function() {
      var _arguments;
      _arguments = arguments;
      return Fiber(function() {
        return fn.apply(null, _arguments);
      }).run();
    };
  };

  Eco = require("eco");

  render = function(template, context) {
    return Eco.render(template, context);
  };

  CoffeeScript = require("coffee-script");

  compile_coffeescript = function(source) {
    return CoffeeScript.compile(source, {
      bare: true
    });
  };

  minify = (function() {
    var parser, uglify, _ref;
    _ref = require("uglify-js"), parser = _ref.parser, uglify = _ref.uglify;
    return function(code) {
      var ast;
      ast = parser.parse(code);
      ast = uglify.ast_mangle(ast);
      ast = uglify.ast_squeeze(ast);
      return uglify.gen_code(ast);
    };
  })();

  glob = make_synchronous(require("glob"));

  beautify = (function() {
    var _beautify;
    _beautify = require("./beautify");
    return function(code) {
      return _beautify(code, {
        indent_size: 2
      });
    };
  })();

  dependencies = require("./static").dependencies;

  manifest = function(options) {
    var extension, extensions, filename, files, module, n, native_modules, path, paths, source, _i, _j, _len, _len1, _path, _ref, _ref1;
    source = options.source, extensions = options.extensions;
    source = Path.resolve(source);
    if (options["static"] != null) {
      _ref = dependencies(source), paths = _ref[0], native_modules = _ref[1];
      paths = paths.concat(glob("" + source + "/**/*.json", {}));
      _ref1 = "assert util path fs module".split(" ");
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        module = _ref1[_i];
        if (__indexOf.call(native_modules, module) < 0) {
          native_modules.push(module);
        }
      }
    } else {
      paths = glob("" + source + "/**/*.{" + extensions + "}", {});
      native_modules = (function() {
        var _j, _len1, _ref2, _results;
        _ref2 = readdir(Path.resolve(__dirname, "node"));
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          filename = _ref2[_j];
          extension = Path.extname(filename);
          _results.push(Path.basename(filename, extension));
        }
        return _results;
      })();
    }
    files = [];
    n = source.split("/").length;
    for (_j = 0, _len1 = paths.length; _j < _len1; _j++) {
      path = paths[_j];
      _path = path.split("/").slice(n).join("/");
      files.push(_path);
    }
    return {
      source: source,
      files: files,
      native_modules: native_modules
    };
  };

  index = function(manifest) {
    var code, compile, compilers, content, cwd, directory, extension, filename, filesystem, identity, module_function, name, part, path, real_path, reference, resolve, template, tmp, _base, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    filesystem = {
      root: {},
      content: {},
      native_modules: {},
      module_functions: {}
    };
    resolve = function() {
      var paths;
      paths = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Path.resolve.apply(Path, [manifest.source].concat(__slice.call(paths)));
    };
    template = read("" + __dirname + "/templates/module.js");
    module_function = function(code, path) {
      return render(template, {
        code: code,
        path: path
      });
    };
    identity = function(x) {
      return x;
    };
    compilers = {
      ".coffee": compile_coffeescript,
      ".js": identity
    };
    _ref = manifest.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      path = _ref[_i];
      directory = Path.dirname(path);
      filename = Path.basename(path);
      tmp = filesystem.root;
      cwd = [];
      if (directory !== ".") {
        _ref1 = directory.split("/");
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          part = _ref1[_j];
          cwd.push << part;
          tmp = (_ref2 = tmp[part]) != null ? _ref2 : tmp[part] = {};
          if ((_ref3 = tmp.__stat) == null) {
            tmp.__stat = stat(resolve.apply(null, cwd));
          }
          if ((_ref4 = (_base = tmp.__stat).type) == null) {
            _base.type = "directory";
          }
        }
      }
      real_path = resolve(path);
      extension = Path.extname(path);
      content = read(real_path);
      reference = md5(content);
      if (__indexOf.call(Object.keys(compilers), extension) >= 0) {
        compile = compilers[extension];
        filesystem.content[reference] = base64(reference);
        filesystem.module_functions[reference] = module_function(compile(content), path);
      } else {
        filesystem.content[reference] = base64(content);
      }
      tmp[filename] = {
        __stat: stat(real_path),
        __ref: reference
      };
      tmp[filename].__stat.type = "file";
    }
    if (__indexOf.call(manifest.native_modules, "http") >= 0 && !(__indexOf.call(manifest.native_modules, "stream") >= 0)) {
      warn("Automatically adding native module 'stream' because 'http' is being used");
      manifest.native_modules.push("stream");
    }
    _ref5 = manifest.native_modules;
    for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
      name = _ref5[_k];
      try {
        path = require.resolve(Path.resolve(__dirname, "node", name));
        code = read(path);
        extension = Path.extname(path);
        reference = md5(code);
        filesystem.native_modules[name] = reference;
        filesystem.content[reference] = base64(reference);
        compile = compilers[extension];
        filesystem.module_functions[reference] = module_function(compile(code));
      } catch (e) {
        warn("Unable to package native module '" + name + "'");
      }
    }
    return filesystem;
  };

  code = function(filesystem) {
    var template;
    template = read("" + __dirname + "/templates/node.js");
    return render(template, filesystem);
  };

  Ark = {
    manifest: function(options) {
      if (options.source == null) {
        error("Please provide source directory via --source option");
      }
      return print(JSON.stringify(manifest(options), null, 2));
    },
    "package": function(options) {
      manifest = options.manifest != null ? JSON.parse(readStream(options.manifest)) : manifest(options);
      return print(options.minify ? minify(code(index(manifest))) : beautify(code(index(manifest))));
    }
  };

  Ark.manifest = run_as_fiber(Ark.manifest);

  Ark["package"] = run_as_fiber(Ark["package"]);

  module.exports = Ark;

}).call(this);
