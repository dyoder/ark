// Generated by CoffeeScript 1.4.0
(function() {
  var Ark, FileSystem, Optimist, argv, command, error, key, options, print, read, readStream, usage, valid, value, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  FileSystem = require("fs");

  read = function(path) {
    return FileSystem.readFileSync(path, 'utf-8');
  };

  readStream = function(stream) {
    var buffer, fiber;
    buffer = "";
    fiber = Fiber.current;
    stream.resume();
    stream.on("data", function(data) {
      return buffer += data;
    });
    stream.on("end", function() {
      return fiber.run();
    });
    Fiber["yield"]();
    return buffer;
  };

  print = console.log;

  usage = read("" + __dirname + "/../doc/USAGE");

  Optimist = require("optimist");

  Ark = require("./ark");

  error = function(message) {
    console.log("ERROR: " + message + "\n\n" + usage);
    return process.exit(-1);
  };

  command = process.argv[2];

  if (command == null) {
    error("No command given.");
  }

  if (Ark[command] == null) {
    error("Unrecognized command '" + command + "'.");
  }

  argv = Optimist.parse(process.argv.slice(3));

  if (argv._.length !== 0) {
    error("Invalid option(s) '" + (argv._.join(", ")) + "'");
  }

  valid = "s source z static u uglify x extensions".split(" ");

  for (key in argv) {
    value = argv[key];
    if (!(__indexOf.call(valid, key) >= 0 || (key = "_"))) {
      error("Invalid option '" + key + "'.");
    }
  }

  options = {
    source: argv.s || argv.source,
    "static": argv.z || argv["static"],
    minify: argv.m || argv.minify,
    extensions: argv.x || argv.extensions
  };

  if (options.source == null) {
    options.manifest = JSON.parse(readStream(process.stdin));
  }

  if ((_ref = options.extensions) == null) {
    options.extensions = "js,json,coffee";
  }

  try {
    print(Ark[command](options));
  } catch (e) {
    error(e.message);
  }

}).call(this);
