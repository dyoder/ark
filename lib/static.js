// Generated by CoffeeScript 1.4.0
(function() {
  var CoffeeScript, FileSystem, Module, basename, compile, create_module, dependencies, detective, dirname, extname, join, module_paths, native_module, print, read, read_package, resolve, resolve_filename, uniq, _ref;

  FileSystem = require("fs");

  read = function(path) {
    return FileSystem.readFileSync(path, 'utf-8');
  };

  print = console.log;

  _ref = require("path"), dirname = _ref.dirname, basename = _ref.basename, extname = _ref.extname, join = _ref.join, resolve = _ref.resolve;

  detective = require("detective");

  CoffeeScript = require("coffee-script");

  compile = function(source) {
    return CoffeeScript.compile(source);
  };

  Module = require("./module");

  module_paths = Module._nodeModulePaths;

  resolve_filename = Module._resolveFilename;

  native_module = function(path) {
    return Module._isNative(path);
  };

  read_package = function(path) {
    return JSON.parse(read(resolve(path, "package.json")));
  };

  uniq = function(array) {
    var element, hash, _i, _len;
    hash = {};
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      element = array[_i];
      hash[element] = true;
    }
    return Object.keys(hash);
  };

  create_module = function(path, parent) {
    var directory, extension, id, module;
    directory = dirname(path);
    extension = extname(path);
    id = join(directory, basename(path, extension));
    module = new Module(id, parent);
    module.filename = path;
    module.paths = module_paths(directory);
    return module;
  };

  dependencies = function(path) {
    var native_modules, paths, _dependencies;
    path = resolve(path, (read_package(path)).main);
    paths = [path];
    native_modules = [];
    _dependencies = function(path, parent) {
      var dependent_path, module, reference, source, _i, _len, _ref1, _results;
      source = read(path);
      if ((extname(path)) === ".coffee") {
        source = compile(source);
      }
      module = create_module(path, parent);
      _ref1 = detective(source);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        reference = _ref1[_i];
        dependent_path = resolve_filename(reference, module);
        if (!native_module(dependent_path)) {
          paths.push(dependent_path);
          _results.push(_dependencies(dependent_path, module));
        } else {
          _results.push(native_modules.push(dependent_path));
        }
      }
      return _results;
    };
    _dependencies(path);
    return [uniq(paths), uniq(native_modules)];
  };

  module.exports = {
    dependencies: dependencies
  };

}).call(this);
